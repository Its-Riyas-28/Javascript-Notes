-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                                            identifier
let varun = 29; // Varun is identifier

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                                            NaN USES
NaN = Not a Number

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                                            NaN USES
NaN + 2 // anything added to nan is also NaN.  
only except NaN + 0 its like power operator its output will be 1. 
NaN + 2 will also be NaN. 
Its only applicable for  NaN ** 0 b'cuz anything to the power 0 is 1. It works the same here.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                                            NUMBER DATATYPE

2power53 is the biggest number. that number data type can store in javascript

-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                                            STRING DATATYPE

'Thus search' => Single quote string. Usefull when you use " " Values.

"Master" > Double quote string. Usefull when you use ' ' Values.

`` => used for both single and double quotes text.

Mainly used for embedding the code. Example:

Let embed = `1+2 = ${1+2} `;

-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                                            NULL DATATYPE USES
null => nothing

-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                                            Undefined DATATYPE USES
Let dob;
Console.log(dob);

Undefined

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                            MODAL Windows in JavaScript

                                                    PROMPT MODAL
Let input= prompt ('Age');
Console.log(input);

So when prompt is displayed on browser it has input box and below that we have cancel & ok.

IF WE CLICK CANCEL IT TAKES AS NULL.

IF WE CLICK OK WITHOUT ENTERING ANY MESSAGE IT THEN IT TAKES AS EMPTY STRING. 

EVEN IF I ENTER SOME NUMBER IT IS ALSO STRING

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                            DEFAULT ARGUMENT
Let input= prompt ('Age', '18');
Console.log(input);

18 is default argument

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                            CONFIRM MODAL

Let input=Confirm('Enter your Age');

This will display ok & cancel button. 

IF I CLICK OK IT IS STORED AS TRUE

IF I CLICK CANCEL IT IS STORED AS FALSE


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- =-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-        
                                            JavaScript Type Conversion

In programming, type conversion is the process of converting data of one type to another. For example, converting string data to number.

There are two types of type conversion in JavaScript:

Implicit Conversion - Automatic type conversion.
Explicit Conversion - Manual type conversion.


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                                Implict Conversion
                                            
Implict Conversion =>  console.log( '5' + '2' );   // '52'  (string concatenation)
console.log( '5' * '2' );   // 10    (numeric multiplication)
console.log( '5' / '2' );   // 2.5   (numeric division)
console.log( '5' - '2' );   // 3     (numeric subtraction)

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                                Explict Conversion

                                                1. String conversion

let age = 23;
console.log(typeof age); //number
age = String(age);       *In Explicit conversion to convert number datatype to string datatype the first letter in string should be caps (i.e String)*
console.log(age); // 23

console.log(typeof age); //string

*It just takes number 23 as character now 23 is string.*

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                                2. string to Number conversion

let age = 'true';
console.log(typeof age); //string
age = Number(age);  *In Explicit conversion to convert String datatype to number datatype the first letter in Number should be caps (i.e Number)*

console.log(typeof age); //number * The datatype would be converted to number here now (i.e string to number)*
console.log(age);       // NaN     *string to number (i.e string that's not character would be not a number)*

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                                3. Boolean to Number conversion

let age = true;
console.log(typeof age); //boolean
age = Number(age);  *In Explicit conversion to convert Boolean datatype to number datatype the first letter in Number should be caps (i.e Number)*

console.log(typeof age); //number * The datatype would be converted from boolean to number here now (i.e boolean to number)*
console.log(age);       // 1    * Boolean to number *

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                                3. Null to Number conversion

let age = null;
console.log(typeof age); //object
age = Number(age);  *In Explicit conversion to convert Null datatype to number datatype the first letter in Number should be caps (i.e Number)*

console.log(typeof age); //number * The datatype would be converted from Null to number here now (i.e null to number)*
console.log(age);       // 0    * Null to number *

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                                4. Number to Boolean conversion

let x =1;

console.log(typeof x); //number

x = Boolean(x); *In Explicit conversion to convert Number datatype to Boolean datatype the first letter in Boolean should be caps (i.e Boolean)*
console.log(typeof x); //Boolean 
console.log(x); //true

                                * In Boolean only 0 => false. 1,-45 => True. Any Number except 0 is true. *

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                                5. String to Boolean conversion

                                                        Example 1

let x = 'true';

console.log(typeof x); //String

x = Boolean(x); *In Explicit conversion to convert String datatype to Boolean datatype the first letter in Boolean should be caps (i.e Boolean)*
console.log(typeof x); //Boolean 
console.log(x); //true

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                                5. String to Boolean conversion

                                                        Example 2

let x = 'false';

console.log(typeof x); //String

x = Boolean(x); *In Explicit conversion to convert String datatype to Boolean datatype the first letter in Boolean should be caps (i.e Boolean)*
console.log(typeof x); //Boolean 
console.log(x); //true

*In string to booean conversion ONLY ‘’ QUOTES IS FALSE other than that even the ' ' with space in between quotes is true. And any string in between 'moko' is also true. *
*
'' => false,
' ' => true,
'false' => true,
'0' => true
*

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                                Unary Operator

unary has the  word uni in it. so uni means 1. So its uses single operand.
The main difference is that unary negation works on a single number to change its sign, 
while multiplication involves combining two numbers using the * operator.

//Unary Operator

let x = 1;
x = -x;          // (i.e x= -1 * x)
console.log(x) // output -1

* It works same like maths [- * - => +] , [- * + => -] , [+ * - => -] , [+ * + => +] *

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                                DIFFERENCE B/W * AND UNARY

                         THE MAIN FACT IS IN MULTIPLICATION IT USES * AND TWO OPERANDS TO PERFORM THE OPERATION. UNARY DOESN'T.


MULTIPLICATION:  

let y = -2 * -2; // Now y is 4 (negative times negative).


Unary : 

let x = -2;
x = -x; // Now x is 2 (negation)

*


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                                Explict Conversion Using Unary Operator

let a = '10' , b = '12'; //String
let sum = +a + +b;  // * +a +b is Unary Operator. Now it converts String to Number * 
console.log(sum) // 22

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                                Binary Operator

                                Binary operators act on two operands (e.g., x + y).

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
                                                Chaining Assignment Operator

let a = b = c = 32;
console.log(a,b,c); // 32 32 32

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-